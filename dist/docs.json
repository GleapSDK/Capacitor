{
  "api": {
    "name": "GleapPlugin",
    "slug": "gleapplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "initialize",
        "signature": "(options: { API_KEY: string; }) => Promise<{ initialized: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ API_KEY: string; }"
          }
        ],
        "returns": "Promise<{ initialized: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Initialize Gleap with an API key",
        "complexTypes": [],
        "slug": "initialize"
      },
      {
        "name": "identify",
        "signature": "(options: { userId: string; userHash?: string; name?: string; email?: string; phone?: string; value?: number; }) => Promise<{ identify: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ userId: string; userHash?: string | undefined; name?: string | undefined; email?: string | undefined; phone?: string | undefined; value?: number | undefined; }"
          }
        ],
        "returns": "Promise<{ identify: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Set user identity",
        "complexTypes": [],
        "slug": "identify"
      },
      {
        "name": "clearIdentity",
        "signature": "() => Promise<{ clearIdentity: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ clearIdentity: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Clear user identity",
        "complexTypes": [],
        "slug": "clearidentity"
      },
      {
        "name": "getIdentity",
        "signature": "() => Promise<{ identity: { userId: string; name?: string; email?: string; phone?: string; value?: number; }; }>",
        "parameters": [],
        "returns": "Promise<{ identity: { userId: string; name?: string | undefined; email?: string | undefined; phone?: string | undefined; value?: number | undefined; }; }>",
        "tags": [
          {
            "name": "since",
            "text": "8.1.0"
          }
        ],
        "docs": "Get the current user identity",
        "complexTypes": [],
        "slug": "getidentity"
      },
      {
        "name": "isUserIdentified",
        "signature": "() => Promise<{ isUserIdentified: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ isUserIdentified: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "8.1.0"
          }
        ],
        "docs": "User identified status.",
        "complexTypes": [],
        "slug": "isuseridentified"
      },
      {
        "name": "log",
        "signature": "(options: { message: string; logLevel?: \"ERROR\" | \"WARNING\" | \"INFO\"; }) => Promise<{ logged: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ message: string; logLevel?: \"ERROR\" | \"WARNING\" | \"INFO\" | undefined; }"
          }
        ],
        "returns": "Promise<{ logged: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Submit a custom log message with the given level",
        "complexTypes": [],
        "slug": "log"
      },
      {
        "name": "attachCustomData",
        "signature": "(options: { data: any; }) => Promise<{ attachedCustomData: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ data: any; }"
          }
        ],
        "returns": "Promise<{ attachedCustomData: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Add custom data",
        "complexTypes": [],
        "slug": "attachcustomdata"
      },
      {
        "name": "setCustomData",
        "signature": "(options: { key: string; value: string; }) => Promise<{ setCustomData: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ key: string; value: string; }"
          }
        ],
        "returns": "Promise<{ setCustomData: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Set custom data",
        "complexTypes": [],
        "slug": "setcustomdata"
      },
      {
        "name": "removeCustomData",
        "signature": "(options: { key: string; }) => Promise<{ removedCustomData: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ key: string; }"
          }
        ],
        "returns": "Promise<{ removedCustomData: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Remove custom data by key",
        "complexTypes": [],
        "slug": "removecustomdata"
      },
      {
        "name": "clearCustomData",
        "signature": "() => Promise<{ clearedCustomData: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ clearedCustomData: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Clear custom data",
        "complexTypes": [],
        "slug": "clearcustomdata"
      },
      {
        "name": "trackEvent",
        "signature": "(options: { name: string; data?: any; }) => Promise<{ loggedEvent: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ name: string; data?: any; }"
          }
        ],
        "returns": "Promise<{ loggedEvent: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "8.0.0"
          }
        ],
        "docs": "Log event to Gleap",
        "complexTypes": [],
        "slug": "trackevent"
      },
      {
        "name": "setEventCallback",
        "signature": "(callback: GleapEventCallback) => Promise<CallbackID>",
        "parameters": [
          {
            "name": "callback",
            "docs": "",
            "type": "(name: string, data?: any) => void"
          }
        ],
        "returns": "Promise<string>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "",
        "complexTypes": [
          "GleapEventCallback",
          "CallbackID"
        ],
        "slug": "seteventcallback"
      },
      {
        "name": "sendSilentCrashReport",
        "signature": "(options: { description: string; severity?: \"LOW\" | \"MEDIUM\" | \"HIGH\"; dataExclusion?: { customData: Boolean; metaData: Boolean; attachments: Boolean; consoleLog: Boolean; networkLogs: Boolean; customEventLog: Boolean; screenshot: Boolean; replays: Boolean; }; }) => Promise<{ sentSilentBugReport: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ description: string; severity?: \"LOW\" | \"MEDIUM\" | \"HIGH\" | undefined; dataExclusion?: { customData: Boolean; metaData: Boolean; attachments: Boolean; consoleLog: Boolean; networkLogs: Boolean; customEventLog: Boolean; screenshot: Boolean; replays: Boolean; } | undefined; }"
          }
        ],
        "returns": "Promise<{ sentSilentBugReport: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Log event to Gleap",
        "complexTypes": [
          "Boolean"
        ],
        "slug": "sendsilentcrashreport"
      },
      {
        "name": "preFillForm",
        "signature": "(options: { data: any; }) => Promise<{ preFilledForm: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ data: any; }"
          }
        ],
        "returns": "Promise<{ preFilledForm: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Prefills the widget's form data",
        "complexTypes": [],
        "slug": "prefillform"
      },
      {
        "name": "addAttachment",
        "signature": "(options: { base64data: string; name: string; }) => Promise<{ attachmentAdded: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ base64data: string; name: string; }"
          }
        ],
        "returns": "Promise<{ attachmentAdded: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Add attachment as bas64 string",
        "complexTypes": [],
        "slug": "addattachment"
      },
      {
        "name": "removeAllAttachments",
        "signature": "() => Promise<{ allAttachmentsRemoved: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ allAttachmentsRemoved: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "All attachments removed",
        "complexTypes": [],
        "slug": "removeallattachments"
      },
      {
        "name": "open",
        "signature": "() => Promise<{ openedWidget: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ openedWidget: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Open widget",
        "complexTypes": [],
        "slug": "open"
      },
      {
        "name": "openNews",
        "signature": "() => Promise<{ openedNews: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ openedNews: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "8.0.4"
          }
        ],
        "docs": "Open news",
        "complexTypes": [],
        "slug": "opennews"
      },
      {
        "name": "openFeatureRequests",
        "signature": "() => Promise<{ openedFeatureRequests: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ openedFeatureRequests: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "8.0.5"
          }
        ],
        "docs": "Open feature requests",
        "complexTypes": [],
        "slug": "openfeaturerequests"
      },
      {
        "name": "close",
        "signature": "() => Promise<{ closedWidget: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ closedWidget: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Close widget",
        "complexTypes": [],
        "slug": "close"
      },
      {
        "name": "isOpened",
        "signature": "() => Promise<{ isOpened: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ isOpened: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Check widget status code",
        "complexTypes": [],
        "slug": "isopened"
      },
      {
        "name": "startFeedbackFlow",
        "signature": "(options: { feedbackFlow?: string; showBackButton?: boolean; }) => Promise<{ startedFeedbackFlow: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ feedbackFlow?: string | undefined; showBackButton?: boolean | undefined; }"
          }
        ],
        "returns": "Promise<{ startedFeedbackFlow: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Start Feedback flow",
        "complexTypes": [],
        "slug": "startfeedbackflow"
      },
      {
        "name": "showFeedbackButton",
        "signature": "(options: { show?: boolean; }) => Promise<{ feedbackButtonShown: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ show?: boolean | undefined; }"
          }
        ],
        "returns": "Promise<{ feedbackButtonShown: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "8.0.0"
          }
        ],
        "docs": "Show or hide the feedback button.",
        "complexTypes": [],
        "slug": "showfeedbackbutton"
      },
      {
        "name": "setLanguage",
        "signature": "(options: { languageCode: string; }) => Promise<{ setLanguage: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ languageCode: string; }"
          }
        ],
        "returns": "Promise<{ setLanguage: string; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Set Language",
        "complexTypes": [],
        "slug": "setlanguage"
      },
      {
        "name": "disableConsoleLogOverwrite",
        "signature": "() => Promise<{ consoleLogDisabled: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ consoleLogDisabled: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Disable console log overwrite",
        "complexTypes": [],
        "slug": "disableconsolelogoverwrite"
      },
      {
        "name": "enableDebugConsoleLog",
        "signature": "() => Promise<{ debugConsoleLogEnabled: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ debugConsoleLogEnabled: boolean; }>",
        "tags": [
          {
            "name": "since",
            "text": "7.0.0"
          }
        ],
        "docs": "Enable debug console log",
        "complexTypes": [],
        "slug": "enabledebugconsolelog"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "Boolean",
      "slug": "boolean",
      "docs": "",
      "tags": [],
      "methods": [
        {
          "name": "valueOf",
          "signature": "() => boolean",
          "parameters": [],
          "returns": "boolean",
          "tags": [],
          "docs": "Returns the primitive value of the specified object.",
          "complexTypes": [],
          "slug": "valueof"
        }
      ],
      "properties": []
    }
  ],
  "enums": []
}